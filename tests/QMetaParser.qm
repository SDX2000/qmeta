qmeta QMetaParser {
  grammar           = "qmeta" identifier:id "{" stmnt+:s "}" eof        -> {['GRAMMAR', id, s]};
  stmnt             = codeFrag
                    | rule;
  codeFrag          = ("header"|"class"|"impl"):t ("prolog"|"epilog"):p hostExpr:h -> {['FRAG', t, p, h]};
  rule              = identifier:id "=" choices:e ";"                   -> {['RULE', id, e]};
  choices           = choice:c "|" choices:c1                           -> {['OR', [c, c1]]}
                    | choice;
  choice            = (term:t spaces -> {t})*:ts ( "->" hostExpr:h)     -> {['HOST_EXPR', ['AND', ts], h]}
                    | (term:t spaces -> {t})*:ts                        -> {['AND', ts]};
  hostExpr          = "{" .*:h "}"                                      -> {h};
  term              = term1:t ":" identifier:id                         -> {['DEFINE', id, t]}
                    | term1;
  term1             = "~"  term2:t                                      -> {['NOT', t]}
                    | term2:t "*"                                       -> {['ZERO_OR_MANY', t]}
                    | term2:t "+"                                       -> {['ONE_OR_MANY', t]}
                    | term2:t "?"                                       -> {['OPTIONAL', t]}
                    | term2;
  term2             = '\''  (~'\'' escapedChar:ec) '\''                 -> {ec}
                    | someToken
                    | identifier
                    | '.'
                    | "(" choices:c ")"                                 -> {c};
  someToken         = spaces? '"' (~'"'  escapedChar)*:ts '"' spaces?   -> {ts};
  escapedChar       = '\\' char:c                                       -> {escape(c)}
                    | char;
}
